name: Build on Pull Request

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - main
  push:
    branches:
      - main
      - workflow
      - clang_tidy

env:
  QT_BUILD_DIR: JetRacer/src/head_unit/cluster_qt/build
  ROS_BUILD_DIR: JetRacer

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang build-essential cmake curl git clang-tidy
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y # Rust for 
        sudo apt install -y cargo 

    - name: Install Qt
      run: |
        sudo apt-get install -y qt6-base-dev qt6-tools-dev-tools
        sudo apt-get install -y qt6-multimedia-dev

    - name: Install run-clang-tidy
      run: |
        sudo git clone git@github.com:lmapii/run-clang-tidy.git
        cd run-clang-tidy
        cargo build
        mv target/debug/run-clang-tidy /usr/local/bin

    - name: Install ROS2 jazzy
      run: |
         sudo apt install -y software-properties-common
         sudo add-apt-repository universe
         sudo apt install -y curl gnupg2 lsb-release
         sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
         echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
         sudo apt update && sudo apt install ros-dev-tools
         sudo apt install -y ros-jazzy-desktop
         source /opt/ros/jazzy/setup.bash

    - name: Build the project
      run: |
          source /opt/ros/jazzy/setup.bash
          cd $ROS_BUILD_DIR
          # Initialize rosdep
          sudo rosdep init || true
          rosdep update
          # Install dependencies
          rosdep install --from-paths . --ignore-src -r -y
          # Build
          colcon build --symlink-install --packages-skip camera_ros

    - name: Run tests
      run: |
        source /opt/ros/jazzy/setup.bash
        cd $ROS_BUILD_DIR
        source ./install/setup.bash
        colcon test --ctest-args tests --packages-skip camera_ros cluster --executor sequential
        colcon test-result --all --verbose
        # cd $QT_BUILD_DIR/cluster_tests
        # export QT_QPA_PLATFORM=offscreen
        # ctest --verbose
  
